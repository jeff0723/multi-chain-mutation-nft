"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Separator = void 0;
const core_1 = require("@inquirer/core");
Object.defineProperty(exports, "Separator", { enumerable: true, get: function () { return core_1.Separator; } });
const chalk_1 = __importDefault(require("chalk"));
const figures_1 = __importDefault(require("figures"));
const ansi_escapes_1 = __importDefault(require("ansi-escapes"));
function isSelectableChoice(choice) {
    return choice != null && !core_1.Separator.isSeparator(choice) && !choice.disabled;
}
exports.default = (0, core_1.createPrompt)((config, done) => {
    const { prefix = (0, core_1.usePrefix)(), instructions } = config;
    const [status, setStatus] = (0, core_1.useState)('pending');
    const [choices, setChoices] = (0, core_1.useState)(() => config.choices.map((choice) => (Object.assign({}, choice))));
    const [cursorPosition, setCursorPosition] = (0, core_1.useState)(0);
    const [showHelpTip, setShowHelpTip] = (0, core_1.useState)(true);
    (0, core_1.useKeypress)((key) => {
        let newCursorPosition = cursorPosition;
        if ((0, core_1.isEnterKey)(key)) {
            setStatus('done');
            done(choices
                .filter((choice) => isSelectableChoice(choice) && choice.checked)
                .map((choice) => choice.value));
        }
        else if ((0, core_1.isUpKey)(key) || (0, core_1.isDownKey)(key)) {
            const offset = (0, core_1.isUpKey)(key) ? -1 : 1;
            let selectedOption;
            while (!isSelectableChoice(selectedOption)) {
                newCursorPosition =
                    (newCursorPosition + offset + choices.length) % choices.length;
                selectedOption = choices[newCursorPosition];
            }
            setCursorPosition(newCursorPosition);
        }
        else if ((0, core_1.isSpaceKey)(key)) {
            setShowHelpTip(false);
            setChoices(choices.map((choice, i) => {
                if (i === cursorPosition && isSelectableChoice(choice)) {
                    return Object.assign(Object.assign({}, choice), { checked: !choice.checked });
                }
                return choice;
            }));
        }
        else if (key.name === 'a') {
            const selectAll = Boolean(choices.find((choice) => isSelectableChoice(choice) && !choice.checked));
            setChoices(choices.map((choice) => isSelectableChoice(choice) ? Object.assign(Object.assign({}, choice), { checked: selectAll }) : choice));
        }
        else if (key.name === 'i') {
            setChoices(choices.map((choice) => isSelectableChoice(choice) ? Object.assign(Object.assign({}, choice), { checked: !choice.checked }) : choice));
        }
        else if ((0, core_1.isNumberKey)(key)) {
            // Adjust index to start at 1
            const position = Number(key.name) - 1;
            // Abort if the choice doesn't exists or if disabled
            if (!isSelectableChoice(choices[position])) {
                return;
            }
            setCursorPosition(position);
            setChoices(choices.map((choice, i) => {
                if (i === position && isSelectableChoice(choice)) {
                    return Object.assign(Object.assign({}, choice), { checked: !choice.checked });
                }
                return choice;
            }));
        }
    });
    const message = chalk_1.default.bold(config.message);
    const allChoices = choices
        .map((choice, index) => {
        if (core_1.Separator.isSeparator(choice)) {
            return ` ${choice.separator}`;
        }
        const line = choice.name || choice.value;
        if (choice.disabled) {
            const disabledLabel = typeof choice.disabled === 'string' ? choice.disabled : '(disabled)';
            return chalk_1.default.dim(`- ${line} ${disabledLabel}`);
        }
        const checkbox = choice.checked
            ? chalk_1.default.green(figures_1.default.circleFilled)
            : figures_1.default.circle;
        if (index === cursorPosition) {
            return chalk_1.default.cyan(`${figures_1.default.pointer}${checkbox} ${line}`);
        }
        return ` ${checkbox} ${line}`;
    })
        .join('\n');
    const windowedChoices = (0, core_1.usePagination)(allChoices, {
        active: cursorPosition,
        pageSize: config.pageSize,
    });
    if (status === 'done') {
        const selection = choices
            .filter((choice) => isSelectableChoice(choice) && choice.checked)
            .map((choice) => choice.name || choice.value);
        return `${prefix} ${message} ${chalk_1.default.cyan(selection.join(', '))}`;
    }
    let helpTip = '';
    if (showHelpTip && (instructions === undefined || instructions)) {
        if (typeof instructions === 'string') {
            helpTip = instructions;
        }
        else {
            const keys = [
                `${chalk_1.default.cyan.bold('<space>')} to select`,
                `${chalk_1.default.cyan.bold('<a>')} to toggle all`,
                `${chalk_1.default.cyan.bold('<i>')} to invert selection`,
                `and ${chalk_1.default.cyan.bold('<enter>')} to proceed`,
            ];
            helpTip = ` (Press ${keys.join(', ')})`;
        }
    }
    return `${prefix} ${message}${helpTip}\n${windowedChoices}${ansi_escapes_1.default.cursorHide}`;
});
