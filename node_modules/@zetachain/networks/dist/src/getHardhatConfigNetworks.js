"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHardhatConfigNetworks = void 0;
const dotenv = __importStar(require("dotenv"));
const networks_1 = __importDefault(require("./networks"));
const getHardhatConfigNetworks = () => {
    const hardhat = {
        chainId: 1337,
        forking: { blockNumber: 14672712, url: "https://rpc.ankr.com/eth" },
    };
    const validatePrivateKey = (privateKey) => {
        if (!privateKey) {
            return [];
        }
        else if (privateKey.startsWith("0x")) {
            throw new Error("PRIVATE_KEY env variable should not start with 0x");
        }
        else if (!/^(0x)?[0-9a-fA-F]{64}$/.test(privateKey)) {
            throw new Error("PRIVATE_KEY env variable is not a valid private key");
        }
        else {
            return [`0x${privateKey}`];
        }
    };
    dotenv.config();
    const accounts = validatePrivateKey(process.env.PRIVATE_KEY);
    const config = {};
    for (const network in networks_1.default) {
        if (network === "btc_testnet")
            continue;
        let apiUrls = networks_1.default[network].api;
        let evmApi = apiUrls?.find((api) => api.type === "evm");
        config[network] = {
            accounts,
            chainId: networks_1.default[network].chain_id,
            gas: networks_1.default[network].fees.assets[0].gas,
            gasPrice: networks_1.default[network].fees.assets[0].gas_price,
            url: evmApi?.url || "",
        };
    }
    return { ...config, hardhat };
};
exports.getHardhatConfigNetworks = getHardhatConfigNetworks;
