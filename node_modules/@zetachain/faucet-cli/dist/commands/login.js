"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logoutGithub = exports.getGithubAccessToken = void 0;
/* eslint-disable no-console */
const fs_1 = __importDefault(require("fs"));
const got_1 = __importDefault(require("got"));
const zod_1 = require("zod");
const constants_1 = require("../constants");
const readline_1 = require("readline");
const requestCodeSchema = zod_1.z.object({
    device_code: zod_1.z.string(),
    expires_in: zod_1.z.number(),
    interval: zod_1.z.number(),
    user_code: zod_1.z.string(),
    verification_uri: zod_1.z.string(),
});
const accessTokenSchema = zod_1.z.object({
    error: zod_1.z.string().optional(),
    error_description: zod_1.z.string().optional(),
    error_uri: zod_1.z.string().optional(),
    access_token: zod_1.z.string().optional(),
});
const whoamiSchema = zod_1.z.object({
    login: zod_1.z.string(),
});
const readTokenFromFile = () => {
    return JSON.parse(fs_1.default.readFileSync(constants_1.FILE_NAME, "utf8"));
};
const writeTokenToFile = (token) => {
    fs_1.default.writeFileSync(constants_1.FILE_NAME, JSON.stringify(token), "utf8");
};
const requestDeviceCode = () => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, got_1.default)(constants_1.GITHUB_REQUEST_CODE_URL, {
        method: "POST",
        searchParams: {
            client_id: constants_1.CLIENT_ID,
        },
        headers: {
            Accept: "application/json",
        },
        throwHttpErrors: false,
    });
    if (response.statusCode !== 200) {
        throw new Error(`Failed to get device code from GitHub.${response.body}`);
    }
    return requestCodeSchema.parse(JSON.parse(response.body));
});
const requestToken = (deviceCode) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, got_1.default)(constants_1.GITHUB_REQUEST_TOKEN_URL, {
        method: "POST",
        searchParams: {
            client_id: constants_1.CLIENT_ID,
            device_code: deviceCode,
            grant_type: "urn:ietf:params:oauth:grant-type:device_code",
        },
        headers: {
            Accept: "application/json",
        },
    });
    if (response.statusCode !== 200) {
        throw new Error("Failed to get access token from GitHub.");
    }
    return accessTokenSchema.parse(JSON.parse(response.body));
});
const whoami = (accessToken) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, got_1.default)(constants_1.GITHUB_WHOAMI_URL, {
        headers: {
            Accept: "application/json",
            Authorization: `Bearer ${accessToken}`,
        },
    });
    return whoamiSchema.parse(JSON.parse(response.body));
});
const getGithubAccessToken = () => __awaiter(void 0, void 0, void 0, function* () {
    const readline = (0, readline_1.createInterface)({
        input: process.stdin,
        output: process.stdout,
    });
    const readLineAsync = (msg) => {
        return new Promise((resolve) => {
            readline.question(msg, (userRes) => {
                resolve(userRes);
            });
        });
    };
    try {
        // Checking saved access token.
        const { access_token } = readTokenFromFile();
        const whoamiInfo = yield whoami(access_token);
        if (whoamiInfo.login) {
            console.info(`GitHub logged as ${whoamiInfo.login}.`);
            return access_token;
        }
        throw new Error("Invalid access token.");
    }
    catch (e) {
        // Need to request a new access token.
        // Requesting device code.
        const deviceCodeInfo = yield requestDeviceCode();
        const deviceCode = deviceCodeInfo.device_code;
        // Asking user to confirm device verification.
        yield readLineAsync(`Please confirm GitHub login at: '${deviceCodeInfo.verification_uri}' using this code: '${deviceCodeInfo.user_code}', and then press Enter to continue.`);
        // Requesting access token.
        const accessTokenInfo = yield requestToken(deviceCode);
        if (accessTokenInfo.error || !accessTokenInfo.access_token) {
            throw new Error(accessTokenInfo.error_description || "Failed to get access token from GitHub.");
        }
        // Verifiying access token.
        const whoamiInfo = yield whoami(accessTokenInfo.access_token);
        // Saving access token.
        writeTokenToFile({ access_token: accessTokenInfo.access_token });
        console.info(`GitHub logged as ${whoamiInfo.login}.`);
        return accessTokenInfo.access_token;
    }
});
exports.getGithubAccessToken = getGithubAccessToken;
const logoutGithub = () => {
    fs_1.default.unlinkSync(constants_1.FILE_NAME); // Deleting file.
};
exports.logoutGithub = logoutGithub;
//# sourceMappingURL=login.js.map