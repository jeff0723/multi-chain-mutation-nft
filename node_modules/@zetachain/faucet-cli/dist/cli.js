#! /usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const figlet_1 = __importDefault(require("figlet"));
const process_1 = require("process");
const drip_1 = require("./commands/drip");
const login_1 = require("./commands/login");
const constants_1 = require("./constants");
const tools_1 = require("./tools");
const LaunchDarkly = require("launchdarkly-node-client-sdk");
const packageJson = require("../package.json");
const cli = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield LaunchDarkly.initialize(constants_1.LD_CLIENT_SIDE_ID, {
        kind: "user",
        key: "context-key",
    }, {
        logger: LaunchDarkly.basicLogger({
            level: "error",
        }),
    });
    yield client.waitUntilReady();
    yield client.setStreaming(true);
    const isEnabled = client.variation("enabled", true);
    const unavailableChains = client.variation("unavailableChains", []);
    const customErrorMessage = client.variation("customErrorMessage", `Faucet is undergoing maintenance. Please try again later.`);
    const { version } = packageJson;
    tools_1.program
        .version(version)
        .name("zetafaucet")
        .option("-l, --logout", "login to your GitHub account")
        .option("-d, --drip", "get drips in selected chain")
        .option("-c, --chain [chain]", "select a chain, valid chains: athens, goerli, bsc-testnet, polygon-mumbai", "zetachain_athens")
        .option("-a, --address <address>", "select address")
        .description("Usage: zetafaucet -d -a 0xADDRESS")
        .parse(process.argv);
    if (!isEnabled) {
        throw new Error(customErrorMessage);
    }
    // eslint-disable-next-line no-console
    console.info(figlet_1.default.textSync("Zeta Faucet CLI"));
    const options = tools_1.program.opts();
    if (options.logout)
        (0, login_1.logoutGithub)();
    if (options.drip)
        yield (0, drip_1.drip)(options, unavailableChains);
    else
        console.error("Invalid command. See -h for available commands.");
    (0, process_1.exit)(0);
});
cli().then(() => {
    (0, process_1.exit)(0);
});
//# sourceMappingURL=cli.js.map