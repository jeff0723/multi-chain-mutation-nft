"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.omniTask = void 0;
const fs = __importStar(require("fs"));
const handlebars = __importStar(require("handlebars"));
const config_1 = require("hardhat/config");
const path = __importStar(require("path"));
const sanitizeSolidityFunctionName = (str) => {
    // Remove any character that's not alphanumeric or underscore
    const cleaned = str.replace(/[^a-zA-Z0-9_]/g, "");
    // If the first character is a digit, prepend with an underscore
    return cleaned.match(/^\d/) ? `_${cleaned}` : cleaned;
};
const processTemplates = async (templateDir, outputDir, data) => {
    try {
        templateDir = path.resolve(__dirname, templateDir);
        const files = fs.readdirSync(templateDir);
        for (const file of files) {
            const templatePath = path.join(templateDir, file);
            // Compiling filename as a template
            const filenameTemplate = handlebars.compile(file);
            const filename = filenameTemplate(data);
            // Replacing .hbs extension if the file was a handlebars template
            const outputPath = path.join(outputDir, filename.replace(".hbs", ""));
            fs.mkdirSync(path.dirname(outputPath), { recursive: true });
            if (fs.lstatSync(templatePath).isDirectory()) {
                // If file is a directory, recursively process it
                await processTemplates(templatePath, outputPath, data);
            }
            else if (path.extname(file) === ".hbs") {
                const templateContent = fs.readFileSync(templatePath, "utf-8");
                const template = handlebars.compile(templateContent);
                const outputContent = template(data);
                fs.writeFileSync(outputPath, outputContent);
            }
            else {
                fs.copyFileSync(templatePath, outputPath);
            }
        }
    }
    catch (error) {
        console.error(`Error processing templates: ${error}`);
    }
};
const main = async (args, hre) => {
    const templateDir = path.resolve(__dirname, "..", "templates", "omnichain");
    const outputDir = path.resolve(process.cwd());
    const argsList = args.arguments || [];
    const names = argsList.map((i) => i.split(":")[0]);
    const types = argsList.map((i) => {
        let parts = i.split(":");
        // If there's a type and it's not empty, use it; if not, default to "bytes32"
        let t = parts.length > 1 && parts[1].trim() !== "" ? parts[1].trim() : "bytes32";
        return t;
    });
    const pairs = names.map((v, i) => [v, types[i]]);
    const data = {
        args,
        arguments: { names, pairs, types },
        contractName: sanitizeSolidityFunctionName(args.name),
    };
    processTemplates(templateDir, outputDir, data);
    const configPath = path.resolve(process.cwd(), "hardhat.config.ts");
    let hardhatConfigContents = fs.readFileSync(configPath, "utf8");
    // Add the omnichain tasks to the hardhat.config.ts file
    ["deploy", "interact"].forEach((task) => {
        const content = `import "./tasks/${task}";\n`;
        if (!hardhatConfigContents.includes(content)) {
            hardhatConfigContents = content + hardhatConfigContents;
        }
    });
    fs.writeFileSync(configPath, hardhatConfigContents);
};
exports.omniTask = (0, config_1.task)("omni", "Generate code for an omnichain smart contract", main)
    .addPositionalParam("name", "Name of the contract")
    .addOptionalVariadicPositionalParam("arguments", "Arguments for a crosschain call (e.g. dest:address to:bytes32 output:uint256)");
