"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.faucetTask = void 0;
const drip_1 = require("@zetachain/faucet-cli/dist/commands/drip");
const constants_1 = require("@zetachain/faucet-cli/dist/constants");
const config_1 = require("hardhat/config");
const balances_1 = require("./balances");
const faucetError = `
* Alternatively, you can request tokens on any address
  by using the --address flag:
  
  npx hardhat faucet --address <wallet_address>
`;
const getRecipientAddress = (args, hre) => {
    const { ethers } = hre;
    if (args.address) {
        return args.address;
    }
    else if (process.env.PRIVATE_KEY) {
        return new ethers.Wallet(process.env.PRIVATE_KEY).address;
    }
    else {
        console.error(balances_1.walletError + faucetError);
        throw new Error();
    }
};
const main = async (args, hre) => {
    if (!constants_1.VALID_CHAINS.includes(args.chain)) {
        const chainNameError = `‚ùå Invalid chain: ${args.chain}. Must be one of: ${constants_1.VALID_CHAINS}`;
        return console.error(chainNameError);
    }
    try {
        const address = getRecipientAddress(args, hre);
        await (0, drip_1.drip)({ address, chain: args.chain }, []);
    }
    catch (error) { }
};
exports.faucetTask = (0, config_1.task)("faucet", "Request ZETA tokens from the faucet on a specific chain.", main)
    .addOptionalParam("address", "Recipient address. (default: address derived from PRIVATE_KEY env variable)")
    .addParam("chain", "Blockchain network where tokens will be sent.", "zetachain_athens");
