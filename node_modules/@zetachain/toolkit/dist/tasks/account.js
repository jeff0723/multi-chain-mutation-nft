"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.accountTask = exports.main = exports.savePrivateKey = exports.getWalletFromRecoveryInput = exports.hexToBech32Address = void 0;
const prompts_1 = require("@inquirer/prompts");
const bech32_1 = require("bech32");
const bip39_1 = require("bip39");
const envfile = __importStar(require("envfile"));
const fs = __importStar(require("fs"));
const config_1 = require("hardhat/config");
const path = __importStar(require("path"));
const hexToBech32Address = (hexAddress, prefix) => {
    const data = Buffer.from(hexAddress.substr(2), "hex");
    const words = bech32_1.bech32.toWords(data);
    return bech32_1.bech32.encode(prefix, words);
};
exports.hexToBech32Address = hexToBech32Address;
const getWalletFromRecoveryInput = async (ethers) => {
    while (true) {
        let recovery = await (0, prompts_1.input)({
            message: "Mnemonic or private key:",
        }, {
            clearPromptOnDone: true,
        });
        try {
            if ((0, bip39_1.validateMnemonic)(recovery)) {
                return ethers.Wallet.fromMnemonic(recovery);
            }
            else {
                return new ethers.Wallet(recovery.startsWith("0x") ? recovery : "0x" + recovery);
            }
        }
        catch (e) {
            console.error(`❌ Invalid mnemonic or private key: ${e}`);
            continue;
        }
    }
};
exports.getWalletFromRecoveryInput = getWalletFromRecoveryInput;
const savePrivateKey = (privateKey) => {
    const filePath = path.join(process.cwd(), ".env");
    let env = envfile.parse(fs.existsSync(filePath) ? fs.readFileSync(filePath, "utf8") : "");
    env.PRIVATE_KEY = privateKey.slice(2);
    fs.writeFileSync(filePath, envfile.stringify(env));
    console.log(`✅ Saved the private key to '${filePath}' file.\n`);
};
exports.savePrivateKey = savePrivateKey;
const main = async (args, hre) => {
    const { ethers } = hre;
    let wallet;
    if (args.recover) {
        wallet = await (0, exports.getWalletFromRecoveryInput)(ethers);
    }
    else {
        wallet = ethers.Wallet.createRandom();
    }
    const { privateKey, address, mnemonic } = wallet;
    console.log(`
🔑 Private key: ${privateKey}`);
    mnemonic && console.log(`🔐 Mnemonic phrase: ${mnemonic.phrase}`);
    console.log(`😃 Address: ${address}
😃 Bech32 address: ${(0, exports.hexToBech32Address)(address, "zeta")}
`);
    if (args.save) {
        (0, exports.savePrivateKey)(privateKey);
    }
};
exports.main = main;
exports.accountTask = (0, config_1.task)("account", "Generates a new account and prints its private key, mnemonic phrase, and address to the console.", exports.main)
    .addFlag("save", "Saves the private key to a '.env' file in the project directory.")
    .addFlag("recover", "Recovers a wallet using either a mnemonic or a private key.");
