"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evmSetup = exports.addZetaEthLiquidity = exports.prepareParams = exports.prepareData = void 0;
const constants_1 = require("@ethersproject/constants");
const units_1 = require("@ethersproject/units");
const hardhat_1 = require("hardhat");
const typechain_types_1 = require("../typechain-types");
const prepareData = (contract, types, args) => {
    const params = (0, exports.prepareParams)(types, args);
    return `${contract}${params.slice(2)}`;
};
exports.prepareData = prepareData;
const prepareParams = (types, args) => {
    const abiCoder = hardhat_1.ethers.utils.defaultAbiCoder;
    for (let i = 0; i < args.length; i++) {
        if (types[i] === "bytes32" && typeof args[i] === "string") {
            args[i] = hardhat_1.ethers.utils.hexlify(hardhat_1.ethers.utils.zeroPad(args[i], 32));
        }
    }
    return abiCoder.encode(types, args);
};
exports.prepareParams = prepareParams;
const addZetaEthLiquidity = async (signer, token, uniswapRouterAddr) => {
    const block = await hardhat_1.ethers.provider.getBlock("latest");
    const tx1 = await token.approve(uniswapRouterAddr, constants_1.MaxUint256);
    await tx1.wait();
    const uniswapRouterFork = typechain_types_1.UniswapV2Router02__factory.connect(uniswapRouterAddr, signer);
    const tx2 = await uniswapRouterFork.addLiquidityETH(token.address, (0, units_1.parseUnits)("1000"), 0, 0, signer.address, block.timestamp + 360, { value: (0, units_1.parseUnits)("1000") });
    await tx2.wait();
};
exports.addZetaEthLiquidity = addZetaEthLiquidity;
const evmSetup = async (wGasToken, uniswapFactoryAddr, uniswapRouterAddr) => {
    const [signer] = await hardhat_1.ethers.getSigners();
    const ZRC20Factory = (await hardhat_1.ethers.getContractFactory("TestZRC20"));
    const token1Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "tBNB", "tBNB"));
    const token2Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "gETH", "gETH"));
    const token3Contract = (await ZRC20Factory.deploy((0, units_1.parseUnits)("1000000"), "tMATIC", "tMATIC"));
    const ZRC20Contracts = [token1Contract, token2Contract, token3Contract];
    const SystemContractFactory = (await hardhat_1.ethers.getContractFactory("TestSystemContract"));
    const systemContract = (await SystemContractFactory.deploy(wGasToken, uniswapFactoryAddr, uniswapRouterAddr));
    await systemContract.setGasCoinZRC20(97, ZRC20Contracts[0].address);
    await systemContract.setGasCoinZRC20(5, ZRC20Contracts[1].address);
    await systemContract.setGasCoinZRC20(80001, ZRC20Contracts[2].address);
    await (0, exports.addZetaEthLiquidity)(signer, ZRC20Contracts[0], uniswapRouterAddr);
    await (0, exports.addZetaEthLiquidity)(signer, ZRC20Contracts[1], uniswapRouterAddr);
    await (0, exports.addZetaEthLiquidity)(signer, ZRC20Contracts[2], uniswapRouterAddr);
    return { ZRC20Contracts, systemContract };
};
exports.evmSetup = evmSetup;
