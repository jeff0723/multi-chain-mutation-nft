"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployZetaTokenConsumerUniV2 = exports.verifyContract = exports.getUniswapV2Router02 = exports.getNow = exports.getZetaMock = exports.getErc20 = exports.getContract = void 0;
const addresses_tools_1 = require("@zetachain/addresses-tools");
const child_process_1 = require("child_process");
const hardhat_1 = require("hardhat");
const address_helpers_1 = require("./address.helpers");
const getContract = async ({ contractName, deployParams, existingContractAddress, }) => {
    const ContractFactory = (await hardhat_1.ethers.getContractFactory(contractName));
    const isGetExistingContract = Boolean(existingContractAddress);
    if (isGetExistingContract) {
        console.log("Getting existing contract from address:", existingContractAddress);
        return ContractFactory.attach(existingContractAddress);
    }
    const contract = (await ContractFactory.deploy(...deployParams));
    await contract.deployed();
    return contract;
};
exports.getContract = getContract;
const getErc20 = async (existingContractAddress) => (0, exports.getContract)({
    contractName: "ERC20",
    ...(existingContractAddress
        ? { existingContractAddress }
        : { deployParams: ["ERC20Mock", "ERC20Mock"] }),
});
exports.getErc20 = getErc20;
const getZetaMock = async () => (0, exports.getContract)({
    contractName: "ZetaEthMock",
    deployParams: ["10000000"],
});
exports.getZetaMock = getZetaMock;
const getNow = async () => {
    const block = await hardhat_1.ethers.provider.getBlock("latest");
    return block.timestamp;
};
exports.getNow = getNow;
const getUniswapV2Router02 = async () => (0, exports.getContract)({
    contractName: "UniswapV2Router02",
    existingContractAddress: (0, address_helpers_1.getAddress)("uniswapV2Router02", {
        customNetworkName: "eth-mainnet",
        customZetaNetwork: "mainnet",
    }),
});
exports.getUniswapV2Router02 = getUniswapV2Router02;
const verifyContract = (addressName, { customNetworkName, customZetaNetwork, } = {}) => {
    const ZETA_NETWORK = process.env.ZETA_NETWORK || customZetaNetwork;
    console.log(`Verifying ${addressName} address on ${ZETA_NETWORK}: ${customNetworkName}.`);
    const command = `ZETA_NETWORK=${ZETA_NETWORK} SCAN_API_KEY=${(0, addresses_tools_1.getScanVariable)()} npx hardhat verify --network ${customNetworkName} --constructor-args lib/args/${addressName}.js ${(0, address_helpers_1.getAddress)(addressName)}`;
    (0, child_process_1.execSync)(command);
};
exports.verifyContract = verifyContract;
const deployZetaTokenConsumerUniV2 = async (zetaToken_, uniswapV2Router_) => (0, exports.getContract)({
    contractName: "ZetaTokenConsumerUniV2",
    ...{ deployParams: [zetaToken_, uniswapV2Router_] },
});
exports.deployZetaTokenConsumerUniV2 = deployZetaTokenConsumerUniV2;
