import { NetworkName, ZetaAddress, ZetaNetworkName } from "@zetachain/addresses";
import { ZetaTokenConsumerUniV2 } from "@zetachain/protocol-contracts/dist/typechain-types";
import { BaseContract, ContractFactory } from "ethers";
import { ERC20, UniswapV2Router02, ZetaEthMock } from "../typechain-types";
export type GetContractParams<Factory extends ContractFactory> = {
    deployParams: Parameters<Factory["deploy"]>;
    existingContractAddress?: null;
} | {
    deployParams?: null;
    existingContractAddress: string;
};
export declare const getContract: <Factory extends ContractFactory<any[], BaseContract>, Contract extends BaseContract>({ contractName, deployParams, existingContractAddress, }: GetContractParams<Factory> & {
    contractName: string;
}) => Promise<Contract>;
export declare const getErc20: (existingContractAddress?: string) => Promise<ERC20>;
export declare const getZetaMock: () => Promise<ZetaEthMock>;
export declare const getNow: () => Promise<any>;
export declare const getUniswapV2Router02: () => Promise<UniswapV2Router02>;
export declare const verifyContract: (addressName: ZetaAddress, { customNetworkName, customZetaNetwork, }?: {
    customNetworkName?: NetworkName | undefined;
    customZetaNetwork?: ZetaNetworkName | undefined;
}) => void;
export declare const deployZetaTokenConsumerUniV2: (zetaToken_: string, uniswapV2Router_: string) => Promise<ZetaTokenConsumerUniV2>;
