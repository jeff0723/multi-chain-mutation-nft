[
  {
    "name": "Moonbeam",
    "chainId": 2500,
    "gateway": "0x9E404e6ff4F2a15C99365Bd6615fCE3FB9E9Cb76",
    "gasService": "0x783ce2eF32Aa74B41c8EbbbeC6F632b6Da00C1e9",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "rpc": "http://localhost:8500/0",
    "tokenName": "DEV",
    "tokenSymbol": "DEV",
    "contract": {
      "abi": [
        "constructor(address gateway_, address gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
        "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
        "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
        "event MetadataUpdate(uint256 _tokenId)",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
        "function approve(address to, uint256 tokenId)",
        "function balanceOf(address owner) view returns (uint256)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getApproved(uint256 tokenId) view returns (address)",
        "function hatchingContracts(string) view returns (string)",
        "function isApprovedForAll(address owner, address operator) view returns (bool)",
        "function mintNFT(address _to, string[] _tokenUris, uint256[] _gasFees, string[] _destinations) payable",
        "function name() view returns (string)",
        "function owner() view returns (address)",
        "function ownerOf(uint256 tokenId) view returns (address)",
        "function registerHatchingContract(string chainName, string hatchingContractAddr)",
        "function renounceOwnership()",
        "function safeTransferFrom(address from, address to, uint256 tokenId)",
        "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
        "function setApprovalForAll(address operator, bool approved)",
        "function supportsInterface(bytes4 interfaceId) view returns (bool)",
        "function symbol() view returns (string)",
        "function tokenIdCounter() view returns (uint256)",
        "function tokenURI(uint256 tokenId) view returns (string)",
        "function transferFrom(address from, address to, uint256 tokenId)",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xDeA5757896b6350FA9209bA12949C7a7323012D7"
    }
  },
  {
    "name": "Avalanche",
    "chainId": 2501,
    "gateway": "0x54C156f087EBA12a869E0CBb49548c3F55E80edC",
    "gasService": "0xD3cB555CB530C3374B122242b15d2943445c31d6",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "rpc": "http://localhost:8500/1",
    "tokenName": "Avax",
    "tokenSymbol": "AVAX",
    "contract": {
      "abi": [
        "constructor(address gateway_, address gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
        "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
        "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
        "event MetadataUpdate(uint256 _tokenId)",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
        "function approve(address to, uint256 tokenId)",
        "function balanceOf(address owner) view returns (uint256)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getApproved(uint256 tokenId) view returns (address)",
        "function hatchingContracts(string) view returns (string)",
        "function isApprovedForAll(address owner, address operator) view returns (bool)",
        "function mintNFT(address _to, string[] _tokenUris, uint256[] _gasFees, string[] _destinations) payable",
        "function name() view returns (string)",
        "function owner() view returns (address)",
        "function ownerOf(uint256 tokenId) view returns (address)",
        "function registerHatchingContract(string chainName, string hatchingContractAddr)",
        "function renounceOwnership()",
        "function safeTransferFrom(address from, address to, uint256 tokenId)",
        "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
        "function setApprovalForAll(address operator, bool approved)",
        "function supportsInterface(bytes4 interfaceId) view returns (bool)",
        "function symbol() view returns (string)",
        "function tokenIdCounter() view returns (uint256)",
        "function tokenURI(uint256 tokenId) view returns (string)",
        "function transferFrom(address from, address to, uint256 tokenId)",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xDeA5757896b6350FA9209bA12949C7a7323012D7"
    }
  },
  {
    "name": "Fantom",
    "chainId": 2502,
    "gateway": "0xcb189eB52ca573eFD633d07A3B5357e4d989D743",
    "gasService": "0x85Fa9202C6Be69e9889CC0247Af72ABc70DbF542",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "rpc": "http://localhost:8500/2",
    "tokenName": "Fantom",
    "tokenSymbol": "FTM",
    "contract": {
      "abi": [
        "constructor(address gateway_, address gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
        "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
        "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
        "event MetadataUpdate(uint256 _tokenId)",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
        "function approve(address to, uint256 tokenId)",
        "function balanceOf(address owner) view returns (uint256)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getApproved(uint256 tokenId) view returns (address)",
        "function hatchingContracts(string) view returns (string)",
        "function isApprovedForAll(address owner, address operator) view returns (bool)",
        "function mintNFT(address _to, string[] _tokenUris, uint256[] _gasFees, string[] _destinations) payable",
        "function name() view returns (string)",
        "function owner() view returns (address)",
        "function ownerOf(uint256 tokenId) view returns (address)",
        "function registerHatchingContract(string chainName, string hatchingContractAddr)",
        "function renounceOwnership()",
        "function safeTransferFrom(address from, address to, uint256 tokenId)",
        "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
        "function setApprovalForAll(address operator, bool approved)",
        "function supportsInterface(bytes4 interfaceId) view returns (bool)",
        "function symbol() view returns (string)",
        "function tokenIdCounter() view returns (uint256)",
        "function tokenURI(uint256 tokenId) view returns (string)",
        "function transferFrom(address from, address to, uint256 tokenId)",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xDeA5757896b6350FA9209bA12949C7a7323012D7"
    }
  },
  {
    "name": "Ethereum",
    "chainId": 2503,
    "gateway": "0x013459EC3E8Aeced878C5C4bFfe126A366cd19E9",
    "gasService": "0x28f8B50E1Be6152da35e923602a2641491E71Ed8",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "rpc": "http://localhost:8500/3",
    "tokenName": "Ether",
    "tokenSymbol": "ETH",
    "contract": {
      "abi": [
        "constructor(address gateway_, address gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
        "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
        "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
        "event MetadataUpdate(uint256 _tokenId)",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
        "function approve(address to, uint256 tokenId)",
        "function balanceOf(address owner) view returns (uint256)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getApproved(uint256 tokenId) view returns (address)",
        "function hatchingContracts(string) view returns (string)",
        "function isApprovedForAll(address owner, address operator) view returns (bool)",
        "function mintNFT(address _to, string[] _tokenUris, uint256[] _gasFees, string[] _destinations) payable",
        "function name() view returns (string)",
        "function owner() view returns (address)",
        "function ownerOf(uint256 tokenId) view returns (address)",
        "function registerHatchingContract(string chainName, string hatchingContractAddr)",
        "function renounceOwnership()",
        "function safeTransferFrom(address from, address to, uint256 tokenId)",
        "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
        "function setApprovalForAll(address operator, bool approved)",
        "function supportsInterface(bytes4 interfaceId) view returns (bool)",
        "function symbol() view returns (string)",
        "function tokenIdCounter() view returns (uint256)",
        "function tokenURI(uint256 tokenId) view returns (string)",
        "function transferFrom(address from, address to, uint256 tokenId)",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xDeA5757896b6350FA9209bA12949C7a7323012D7"
    }
  },
  {
    "name": "Polygon",
    "chainId": 2504,
    "gateway": "0xc7B788E88BAaB770A6d4936cdcCcd5250E1bbAd8",
    "gasService": "0xC573c722e21eD7fadD38A8f189818433e01Ae466",
    "constAddressDeployer": "0x69aeB7Dc4f2A86873Dae8D753DE89326Cf90a77a",
    "create3Deployer": "0x783E7717fD4592814614aFC47ee92568a495Ce0B",
    "tokens": {
      "aUSDC": "aUSDC"
    },
    "rpc": "http://localhost:8500/4",
    "tokenName": "Matic",
    "tokenSymbol": "MATIC",
    "contract": {
      "abi": [
        "constructor(address gateway_, address gasReceiver)",
        "error InvalidAddress()",
        "error NotApprovedByGateway()",
        "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
        "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
        "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
        "event MetadataUpdate(uint256 _tokenId)",
        "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
        "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
        "function approve(address to, uint256 tokenId)",
        "function balanceOf(address owner) view returns (uint256)",
        "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
        "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
        "function gasService() view returns (address)",
        "function gateway() view returns (address)",
        "function getApproved(uint256 tokenId) view returns (address)",
        "function hatchingContracts(string) view returns (string)",
        "function isApprovedForAll(address owner, address operator) view returns (bool)",
        "function mintNFT(address _to, string[] _tokenUris, uint256[] _gasFees, string[] _destinations) payable",
        "function name() view returns (string)",
        "function owner() view returns (address)",
        "function ownerOf(uint256 tokenId) view returns (address)",
        "function registerHatchingContract(string chainName, string hatchingContractAddr)",
        "function renounceOwnership()",
        "function safeTransferFrom(address from, address to, uint256 tokenId)",
        "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
        "function setApprovalForAll(address operator, bool approved)",
        "function supportsInterface(bytes4 interfaceId) view returns (bool)",
        "function symbol() view returns (string)",
        "function tokenIdCounter() view returns (uint256)",
        "function tokenURI(uint256 tokenId) view returns (string)",
        "function transferFrom(address from, address to, uint256 tokenId)",
        "function transferOwnership(address newOwner)"
      ],
      "address": "0xDeA5757896b6350FA9209bA12949C7a7323012D7"
    }
  }
]
